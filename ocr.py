import os
import subprocess
from pdf2image import convert_from_path
import yaml
from tqdm import tqdm

from config import get_config_value


TESSERACT_PATH = get_config_value("tesseract_path")
DATA_PATH = get_config_value("data_path")

def _format_page_index(i, total):
    total_digits = len(str(total))
    return f"{i+1:0{total_digits}d}"

def pdf_to_text(pdf_path, course_tag: str="default", tesseract_path=TESSERACT_PATH, data_path=DATA_PATH, ):
    pdf_name = os.path.splitext(os.path.basename(pdf_path))[0]
    output_dir = os.path.join(data_path, course_tag, pdf_name)
    output_text_file = os.path.join(output_dir, f"{pdf_name}.txt")  # combined texts for high-level search
    # Create output directory  # TODO: Check if we want to overwrite old data
    os.makedirs(output_dir, exist_ok=True)

    # Convert PDF pages to images
    print(f"Converting {pdf_path} to images...")
    images = convert_from_path(pdf_path, dpi=300)

    print(f"Running OCR on {len(images)} images...")
    img_txt_pair_length = len(images)

    for i, image in tqdm(enumerate(images)):
        page_str = _format_page_index(i, img_txt_pair_length)
        i_img = os.path.join(output_dir, f"{pdf_name}_p{page_str}.png")
        image.save(i_img, "PNG")

        # Run Tesseract on each image and save output in the same directory
        txt_output = os.path.join(output_dir, f"{pdf_name}_p{page_str}")  # tess will append .txt
        command = [tesseract_path, i_img, txt_output, "-l", "eng"]  # , "--oem", "1", "--psm", "3"]
        subprocess.run(command)

    # Combine all page text into a single output file
    with open(output_text_file, "w", encoding='utf-8') as outfile:
        for i in range(1, img_txt_pair_length+1):  # we used page number starting from 1
            page_str = _format_page_index(i-1, img_txt_pair_length)
            txt_file = os.path.join(output_dir, f"{pdf_name}_p{page_str}.txt")
            with open(txt_file, "r", encoding='utf-8') as infile:
                outfile.write(infile.read() + "\n")

    # Remove any intermediate .ppm files generated by pdf2image
    for ppm_file in os.listdir(output_dir):
        if ppm_file.endswith(".ppm"):
            os.remove(os.path.join(output_dir, ppm_file))

    return output_text_file

def convert_pdf_in_directory(directory, course_tag: str=None, skip_existing=True, tesseract_path=TESSERACT_PATH, data_path=DATA_PATH):
    course_tag = course_tag if course_tag else os.path.basename(directory)
    for file in os.listdir(directory):
        if file.endswith(".pdf"):
            pdf_path = os.path.join(directory, file)
            # check for existing entry in data
            pdf_name = os.path.splitext(os.path.basename(pdf_path))[0]
            output_dir = os.path.join(data_path, course_tag, pdf_name)
            output_text_file = os.path.join(output_dir, f"{pdf_name}.txt")
            if os.path.exists(output_text_file) and skip_existing:
                print(f"Skipping {pdf_path} as {output_text_file} already exists.")
                continue
            text_file = pdf_to_text(pdf_path, course_tag, tesseract_path, data_path)
            print(f"Output saved to {text_file}")

            # record the path to original pdf file in a yaml file
            pdf_yaml = os.path.join(output_dir, f"{pdf_name}.yaml")
            with open(pdf_yaml, "w") as f:
                yaml.dump({"pdf_path": pdf_path}, f)
        else:
            print(f"Skipping {file} as it is not a PDF file")

    


if __name__ == "__main__":
    convert_pdf_in_directory("test_2", "RL_Probabilities")
